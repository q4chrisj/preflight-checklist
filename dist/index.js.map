{"version":3,"file":"index.js","sources":["../webpack://preflighr-checklist/./dist/index.js","../webpack://preflighr-checklist/external \"fs\"","../webpack://preflighr-checklist/external \"path\"","../webpack://preflighr-checklist/webpack/bootstrap","../webpack://preflighr-checklist/webpack/runtime/compat","../webpack://preflighr-checklist/webpack/startup"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import * as core from \"@actions/core\";\n// import * as github from \"@actions/github\";\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\n// const token = core.getInput(\"token\");\n// const octokit = github.getOctokit(token);\n// const repo = github.context.repo;\nlet workspace = process.env.GITHUB_WORKSPACE || path_1.default.join(__dirname, \"../\");\nlet repo_files = [];\nlet found_parameters = [];\nconst excluded_dirs = [\"node_modules\", \"dist\", \".git\", \".github\"];\nasync function run() {\n    repo_files = getAllFiles(workspace, []);\n    for (const file of repo_files) {\n        let file_contents = fs_1.default.readFileSync(file, 'utf8');\n        const pattern = /name\\s+=\\s+\"\\/\\$\\{[^}]+\\}\\/([^\"]+)\"/g;\n        found_parameters = found_parameters.concat(Array.from(file_contents.matchAll(pattern), (m) => m[1]));\n    }\n    console.log('\\nSSM parameters found in: %s\\n', workspace);\n    found_parameters.forEach(f => {\n        console.log(f);\n    });\n    // now we have to\n    // 1. Figure out what the branch we are merging into is\n    // 2. Get the secrets for the branch we are merging into \n    // 3. Connect to aws using the credentials from 2\n    // 4. Get all the SSM params and see if any are missing (based on what found_parameters contains)\n}\nconst getAllFiles = function (dir, fileArray) {\n    let entries = fs_1.default.readdirSync(dir);\n    fileArray = fileArray || [];\n    entries.forEach(entry => {\n        let is_exluded_dir = excluded_dirs.find(dir => dir == entry);\n        if (!is_exluded_dir) {\n            if (fs_1.default.statSync(path_1.default.join(dir, entry)).isDirectory()) {\n                fileArray = getAllFiles(path_1.default.join(dir, entry), fileArray);\n            }\n            else {\n                fileArray.push(path_1.default.join(dir, entry));\n            }\n        }\n    });\n    return fileArray;\n};\nrun();\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(283);\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;ACjDA;;A;;;;;ACAA;;A;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;ACDA;AACA;AACA;AACA;;;;A","sourceRoot":""}